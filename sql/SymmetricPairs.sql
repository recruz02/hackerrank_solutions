/*
Enter your query here.
Please append a semicolon ";" at the end of the query and enter your query in a single line to avoid error.

Two pairs (X1, Y1) and (X2, Y2) are said to be symmetric pairs if X1 = Y2 and X2 = Y1.
Write a query to output all such symmetric pairs in ascending order by the value of X.

Questions:
1) HOW DO YOU VERIFY WHEN JOINING, THAT YOU DON'T JOIN TO THE SAME RECORD AS YOURSELF? E.G., GUARANTEE GETTING POINT 2, AND NOT JOIN TO YOURSELF?
1a) DO YOU CREATE A TEMPORARY TABLE?
1b) DO YOU CREATE A ROW_NUMBER UNIQUE IDENTIFIER?

ANSWER) USE COMMON TABLE EXPRESSION (CTE) WITH THE ROW_NUMBER FUNCTION. THIS WILL ESSENTIALLY CREATE A TEMPORARY TABLE, WITH AN ID COLUMN. WHEN COMPARING ROWS, SIMPLY MAKE SURE THAT THE TABLE YOU JOIN TO HAS A DIFFERENT ID. (F1.ID != F2.ID)

2) ONCE A SYMMETRICAL POINT IS FOUND, HOW DO YOU EXCLUDE THE SECONDARY POINT FROM THE RESULT SET?

ANSWER) FOR THIS ISSUE, WE SIMPLY COMPARE WHERE F1.X "IS LESS THAN" F1.Y. 
WE CAN DO THIS BECAUSE WE KNOW THAT ONCE THE RESULTS ARE ORDERED BY X, THEN ANY SYMMETRICAL POINTS ARE GUARANTEED TO BE THE DUPLICATE/REVERSE OF THE ORIGINAL POINT FOUND TO BE SYMMETRICAL.

*/

WITH FUNCTIONS_CTE (ID, X, Y) AS
(
    SELECT
        ROW_NUMBER() OVER(ORDER BY X),
        X, 
        Y 
    FROM FUNCTIONS
)
SELECT DISTINCT
    F1.X,
    F1.Y
FROM
    FUNCTIONS_CTE F1
    INNER JOIN FUNCTIONS_CTE F2
        ON F1.X = F2.Y
        AND F2.X = F1.Y
        AND F1.ID != F2.ID
WHERE
    F1.X <= F1.Y
ORDER BY
    F1.X

   